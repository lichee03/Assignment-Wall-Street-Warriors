/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */


import java.util.ArrayList;
import java.util.List;
import java.util.PriorityQueue;
import java.util.Scanner;

/**
 * @author lichee
 */
public class TradingApp {

    private TradingEngine tradingEngine;
    private PortFolio portfolio;
    private AdminPanel adminPanel;
    private List<Order> orderHistory;
    private Database database;

    public TradingApp(TradingEngine tradingEngine) {
        this.tradingEngine = tradingEngine;

    }


    public void setOrder(User user) {
        Scanner sc = new Scanner(System.in);
        System.out.println("Enter stock symbol: ");
        String symbol = sc.nextLine().toUpperCase(); // Convert symbol to uppercase for consistency
        System.out.println("Enter amount of shares: ");
        int shares = sc.nextInt();

        System.out.println("1: Buy\n2: Sell");
        int type = sc.nextInt();
        Order.Type orderType;
        switch (type) {
            case 1:
                orderType = Order.Type.BUY;
                break;
            case 2:
                orderType = Order.Type.SELL;
                break;
            default:
                System.out.println("Invalid option. Exiting.");
                return;
        }

        System.out.println("1: Market\n2: Limit");
        int position = sc.nextInt();
        Order.Position orderPosition;
        switch (position) {
            case 1:
                orderPosition = Order.Position.MARKET;
                break;
            case 2:
                orderPosition = Order.Position.LIMIT;
                break;
            default:
                System.out.println("Invalid option. Exiting.");
                return;
        }

        if (orderPosition == Order.Position.LIMIT) {
            System.out.println("Enter price: ");
            double price = sc.nextDouble();
            Order order = new Order(new Stock(symbol), orderType, orderPosition, shares, price);
            placeOrder(user, order);
        } else {
            Order order = new Order(new Stock(symbol), orderType, orderPosition, shares);
            placeOrder(user, order);
        }
    }
    public void placeOrder(User user, Order order) {
        database = new Database();
        database.insertOrderHistory(order, user);
        portfolio = new PortFolio(user);
        tradingEngine.executeOrder(order, portfolio);
        if (tradingEngine.isClosingTime()) {
            adminPanel.checkAccountBalance();
        }

    }

    public void updatePendingOrder(User user) {
        System.out.println(tradingEngine.getPendingOrders(user));

    }


}
