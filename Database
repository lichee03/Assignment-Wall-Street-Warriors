import org.springframework.boot.autoconfigure.mail.MailProperties;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.ResultSet;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class Database{
    private static final String DB_URL = "jdbc:mysql://localhost:3306/assignment";
    private static final String DB_USERNAME = "root";
    private static final String DB_PASSWORD = "chai123!";

    public void insertUser(String name, String email, String password) {

        try (Connection connection = DriverManager.getConnection(DB_URL, DB_USERNAME, DB_PASSWORD)) {
            String sql = "INSERT INTO user (Name, Email, Password) VALUES (?, ?, ?)";
            PreparedStatement statement = connection.prepareStatement(sql);

            // Set the values for the parameters in the prepared statement
            statement.setString(1, name);
            statement.setString(2, email);
            statement.setString(3, password);


            // Execute the query
            int rowsAffected = statement.executeUpdate();
            System.out.println("Rows affected: " + rowsAffected);

            statement.close();
        } catch (SQLException e) {
            System.err.println("Error inserting data: " + e.getMessage());
            e.printStackTrace();
        }
    }

    public boolean readUser(String email, String password) {
        try (Connection connection = DriverManager.getConnection(DB_URL, DB_USERNAME, DB_PASSWORD)) {
            String sql = "SELECT Email, Password FROM user";
            PreparedStatement statement = connection.prepareStatement(sql);

            // Execute the query
            ResultSet resultSet = statement.executeQuery();

            // Process the result set
            while (resultSet.next()) {
                String Demail = resultSet.getString("Email");
                String Dpassword = resultSet.getString("Password");
                if (Demail.equals(email) && Dpassword.equals(password)) {
                    return true;
                }

            }
            resultSet.close();
            statement.close();
        } catch (SQLException e) {
            System.err.println("Error reading data: " + e.getMessage());
            e.printStackTrace();
        }
        return false;
    }

    public void updateAccbalance(String name, double balance) {
        try (Connection connection = DriverManager.getConnection(DB_URL, DB_USERNAME, DB_PASSWORD)) {
            String sql = "UPDATE user SET AccountBalance = ? WHERE Name= ?";
            PreparedStatement statement = connection.prepareStatement(sql);

            // Set the new values for the columns
            statement.setDouble(1, balance);
            statement.setString(2, name);

            // Execute the update statement
            int rowsAffected = statement.executeUpdate();

            System.out.println("Rows affected: " + rowsAffected);

            statement.close();
        } catch (SQLException e) {
            System.err.println("Error updating data: " + e.getMessage());
            e.printStackTrace();
        }
    }

    public double retriveAccbalance(String name) {
        double accountBalance = 0.0;
        try (Connection connection = DriverManager.getConnection(DB_URL, DB_USERNAME, DB_PASSWORD)) {
            String sql = "SELECT Name, AccountBalance FROM user";
            PreparedStatement statement = connection.prepareStatement(sql);

            ResultSet resultSet = statement.executeQuery();
            // Process the result set
            while (resultSet.next()) {
                String Dname = resultSet.getString("Name");
                double Dbalance = resultSet.getDouble("AccountBalance");
                if (Dname.equals(name)) {
                    return Dbalance;
                }
            }
            resultSet.close();
            statement.close();
        } catch (SQLException e) {
            System.err.println("Error retrieving data: " + e.getMessage());
            e.printStackTrace();
        }
        return accountBalance;
    }


    public void updateHoldings(String name, String symbol, int shares) {
        try (Connection connection = DriverManager.getConnection(DB_URL, DB_USERNAME, DB_PASSWORD)) {
            String sql = "UPDATE holdings SET Shares = ? WHERE UserName = ? AND Stocksymbol = ?";
            PreparedStatement statement = connection.prepareStatement(sql);

            // Set the new values for the columns
            statement.setInt(1, shares);
            statement.setString(2, name);
            statement.setString(3, symbol);
            // Execute the update statement
            int rowsAffected = statement.executeUpdate();

            System.out.println("Rows affected: " + rowsAffected);

            statement.close();
        } catch (SQLException e) {
            System.err.println("Error updating data: " + e.getMessage());
            e.printStackTrace();
        }
    }

    public void insertHoldings(String name, String symbol, int shares) {
        try (Connection connection = DriverManager.getConnection(DB_URL, DB_USERNAME, DB_PASSWORD)) {
            String sql = "INSERT INTO holdings (UserName, Stocksymbol, Shares) VALUES (?, ?, ?)";
            PreparedStatement statement = connection.prepareStatement(sql);

            // Set the values for the parameters in the prepared statement
            statement.setString(1, name);
            statement.setString(2, symbol);
            statement.setInt(3, shares);


            // Execute the query
            int rowsAffected = statement.executeUpdate();
            System.out.println("Rows affected: " + rowsAffected);

            statement.close();
        } catch (SQLException e) {
            System.err.println("Error inserting data: " + e.getMessage());
            e.printStackTrace();
        }
    }
    public User retriveUser(String email){
        User user= null;
        try (Connection connection = DriverManager.getConnection(DB_URL, DB_USERNAME, DB_PASSWORD)) {
            String sql = "SELECT Name, Email, Password ,Status FROM user";
            PreparedStatement statement = connection.prepareStatement(sql);

            ResultSet resultSet = statement.executeQuery();

            // Process the result set
            while (resultSet.next()) {
                String Dname = resultSet.getString("Name");
                String Demail = resultSet.getString("Email");
                String Dpassword=resultSet.getString("Password");
                String Dstatus= resultSet.getString("Status");
                if(Demail.equals(email)){
                    user= new User(Dname,Demail,Dpassword,Dstatus);
                }

            }
            resultSet.close();
            statement.close();
        } catch (SQLException e) {
            System.err.println("Error retrieving data: " + e.getMessage());
            e.printStackTrace();
        }
        return user;

    }
    public List retriveUserList(){
        User user= null;
        List<User> userList= new ArrayList<>();
        try (Connection connection = DriverManager.getConnection(DB_URL, DB_USERNAME, DB_PASSWORD)) {
            String sql = "SELECT Name, Email, Password ,Status FROM user";
            PreparedStatement statement = connection.prepareStatement(sql);

            ResultSet resultSet = statement.executeQuery();

            // Process the result set
            while (resultSet.next()) {
                String Dname = resultSet.getString("Name");
                String Demail = resultSet.getString("Email");
                String Dpassword=resultSet.getString("Password");
                String Dstatus= resultSet.getString("Status");

                    user= new User(Dname,Demail,Dpassword,Dstatus);
                    userList.add(user);
                }


            resultSet.close();
            statement.close();
        } catch (SQLException e) {
            System.err.println("Error retrieving data: " + e.getMessage());
            e.printStackTrace();
        }
        return userList;

    }
    public void updateStatus(String status, String name){
        try (Connection connection = DriverManager.getConnection(DB_URL, DB_USERNAME, DB_PASSWORD)) {
            String sql = "UPDATE user SET Status = ? WHERE Name= ?";
            PreparedStatement statement = connection.prepareStatement(sql);

            // Set the new values for the columns
            statement.setString(1, status);
            statement.setString(2, name);

            // Execute the update statement
            int rowsAffected = statement.executeUpdate();

            System.out.println("Rows affected: " + rowsAffected);

            statement.close();
        } catch (SQLException e) {
            System.err.println("Error updating data: " + e.getMessage());
            e.printStackTrace();
        }
    }



    public boolean readHoldings(String symbol) {
        try (Connection connection = DriverManager.getConnection(DB_URL, DB_USERNAME, DB_PASSWORD)) {
            String sql = "SELECT Stocksymbol, Shares FROM holdings";
            PreparedStatement statement = connection.prepareStatement(sql);

            // Execute the query
            ResultSet resultSet = statement.executeQuery();

            // Process the result set
            while (resultSet.next()) {
                String Dsymbol = resultSet.getString("Stocksymbol");
                if (Dsymbol.equals(symbol)) {
                    return true;
                }

            }
            resultSet.close();
            statement.close();
        } catch (SQLException e) {
            System.err.println("Error reading data: " + e.getMessage());
            e.printStackTrace();
        }
        return false;
    }

    public Map<Stock, Integer> retriveHoldings() {
        Map<Stock, Integer> holdings = new HashMap<>();
        try (Connection connection = DriverManager.getConnection(DB_URL, DB_USERNAME, DB_PASSWORD)) {
            String sql = "SELECT Stocksymbol, Shares FROM holdings";
            PreparedStatement statement = connection.prepareStatement(sql);

            ResultSet resultSet = statement.executeQuery();

            // Process the result set
            while (resultSet.next()) {
                String symbol = resultSet.getString("Stocksymbol");
                int shares = resultSet.getInt("Shares");
                Stock stock = new Stock(symbol);
                // Store the data in the map
                holdings.put(stock, shares);
            }
            resultSet.close();
            statement.close();
        } catch (SQLException e) {
            System.err.println("Error retrieving data: " + e.getMessage());
            e.printStackTrace();
        }
        return holdings;

    }

    public void insertPendingOrder(Order order, User user) {
        try (Connection connection = DriverManager.getConnection(DB_URL, DB_USERNAME, DB_PASSWORD)) {
            String sql = "INSERT INTO PendingOrder (Name, Position, OrderType, Symbol, OrderPrice, Shares, OrderTime) VALUES (?, ?, ?, ?, ?, ?, ?)";
            PreparedStatement statement = connection.prepareStatement(sql);

            // Set the values for the parameters in the prepared statement
            statement.setString(1, user.getName());
            statement.setString(2, order.getPosition().toString());
            statement.setString(3, order.getType().toString());
            statement.setString(4, order.getStock().getSymbol());
            statement.setDouble(5, order.getPrice());
            statement.setInt(6, order.getShares());
            statement.setString(7, order.getTime());


            // Execute the query
            int rowsAffected = statement.executeUpdate();
            System.out.println("Rows affected: " + rowsAffected);

            statement.close();
        } catch (SQLException e) {
            System.err.println("Error inserting data: " + e.getMessage());
            e.printStackTrace();
        }
    }

    public List<Order> retrivePendingOrder(User user) {
        List<Order> pendingOrders = new ArrayList<>();
        Order order = null;
        try (Connection connection = DriverManager.getConnection(DB_URL, DB_USERNAME, DB_PASSWORD)) {
            String sql = "SELECT OrderID, Name, OrderType, Position, Symbol, OrderPrice, Shares, OrderTime, Status FROM PendingOrder";
            PreparedStatement statement = connection.prepareStatement(sql);

            ResultSet resultSet = statement.executeQuery();

            // Process the result set
            while (resultSet.next()) {
                int Did=resultSet.getInt("OrderID");
                String Dname = resultSet.getString("Name");
                String Dtype = resultSet.getString("OrderType");
                String Dposition = resultSet.getString("Position");
                String Dsymbol = resultSet.getString("Symbol");
                double Dprice = resultSet.getDouble("OrderPrice");
                int Dshare = resultSet.getInt("Shares");
                String Dtime = resultSet.getString("OrderTime");
                String Dstatus= resultSet.getString("Status");
                if (Dname.equals(user.getName())&&Dstatus.equalsIgnoreCase("Pending")) {
                Stock stock = new Stock(Dsymbol);
                Order.Position position = getPositionFromString(Dposition);
                Order.Type type = getTypeFromString(Dtype);
                    DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd-MM-yyyy HH:mm:ss");
                    LocalDateTime dateTime = LocalDateTime.parse(Dtime, formatter);
                order= new Order(Did,stock,type,position,Dshare,Dprice,dateTime);
                   pendingOrders.add(order);

                }
            }
            resultSet.close();
            statement.close();
        } catch (SQLException e) {
            System.err.println("Error retrieving data: " + e.getMessage());
            e.printStackTrace();
        }
        return pendingOrders;

    }
    public static Order.Position getPositionFromString(String positionString) {
        switch (positionString) {
            case "LIMIT":
                return Order.Position.LIMIT;
            case "MARKET":
                return Order.Position.MARKET;
            default:
                throw new IllegalArgumentException("Invalid position value: " + positionString);
        }
    }
    public static Order.Type getTypeFromString(String type) {
        switch (type) {
            case "BUY":
                return Order.Type.BUY;
            case "SELL":
                return Order.Type.SELL;
            default:
                throw new IllegalArgumentException("Invalid position value: " + type);
        }
    }
    public void updatePendingOrder(int orderId) {
        try (Connection connection = DriverManager.getConnection(DB_URL, DB_USERNAME, DB_PASSWORD)) {
            String sql = "UPDATE PendingOrder SET Status = ? WHERE OrderID = ?";
            PreparedStatement statement = connection.prepareStatement(sql);

            // Set the new values for the columns
            statement.setString(1, "completed");
            statement.setInt(2, orderId);
            // Execute the update statement
            int rowsAffected = statement.executeUpdate();//can be deleted after debugging
            System.out.println("Rows affected: " + rowsAffected);

            statement.close();
        } catch (SQLException e) {
            System.err.println("Error updating data: " + e.getMessage());
            e.printStackTrace();
        }
    }
    }



