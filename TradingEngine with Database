/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */

import java.time.*;
import java.util.*;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;

/**
 * @author lichee
 */
public class TradingEngine {

    private List<Stock> stocks;
    private Map<Stock, List<Order>> buyOrders;
    private Map<Stock, List<Order>> sellOrders;
    private TradingApp tradingApp;
    private Map<Stock, Integer> lotPool; // keep track of the 500-lot pool 
    private List<Order> pendingOrders;
    private List<Order> orderHistory;

    private Stocklist2 stocklist;
    private Database database;
    private ScheduledExecutorService executorService;
    private final int INTERVAL_HOURS = 24;

    public enum Criteria {
        CRITERIA_LONGEST_TIME_LENGTH,
        CRITERIA_HIGHEST_AMOUNT_OF_MONEY
    }

    public TradingEngine(List<Stock> stocks) {
        this.stocks = stocks;
        this.buyOrders = new HashMap<>();
        this.sellOrders = new HashMap<>();
        this.pendingOrders = new ArrayList<>();
        database = new Database();
        for (Stock stock : stocks) {
            buyOrders.put(stock, new ArrayList<>());
            sellOrders.put(stock, new ArrayList<>());
            //lotPool.put(stock, 50000); //each stock have 500lots
        }
        executorService = Executors.newSingleThreadScheduledExecutor();
        executorService.scheduleAtFixedRate(this::replenishLotPool, 0, INTERVAL_HOURS, TimeUnit.HOURS);
        ;
    }


    public void executeOrder(Order order, PortFolio portfolio) {
        String symbol = order.getStock().getSymbol();
        double price = order.getStock().getPrice(); //get current market stock price
        double acceptableRange = price * 0.01; // Calculate 1% of the current price
        double lowerBound = price - acceptableRange;
        double upperBound = price + acceptableRange;
        double orderPrice = order.getPrice();
        Order.Position position = order.getPosition();
        int maxShares = isInitialTradingPeriod() ? Integer.MAX_VALUE : 500;
        // Check if the stock exists in the buyOrders map
        if (!buyOrders.containsKey(order.getStock())) {
            buyOrders.put(order.getStock(), new LinkedList<>());
        }

        // Check if the stock exists in the sellOrders map
        if (!sellOrders.containsKey(order.getStock())) {
            sellOrders.put(order.getStock(), new LinkedList<>());
        }
        if (!isTradingHours()) {
            System.out.println("Trading is currently closed. Please try again during trading hours.");
            database.updateOrderHistory(order.getID(), "Failed");
            return;
        }
        if (order.getShares() > maxShares) {
            System.out.println("Exceed order limitation");
            database.updateOrderHistory(order.getID(), "Failed");
            return;
        }
        switch (position) {
            case MARKET:
                if (order.getType() == Order.Type.BUY) {
                    buyOrders.get(order.getStock()).add(order); //find order whether its available or not , if available, add order
                    tryExecuteBuyOrders(order.getStock(), portfolio);

                } else {
                    sellOrders.get(order.getStock()).add(order);
                    tryExecuteSellOrders(order.getStock(), portfolio);
                }
                break;
            case LIMIT:
                if (orderPrice >= lowerBound && orderPrice <= upperBound) {
                    database.insertPendingOrder(order, portfolio.getUser());
                    //pendingOrders.add(order);
                    CheckPendingOrder(portfolio);
                } else {
                    System.out.println("Price is outside the acceptable range, order failed");
                    database.updateOrderHistory(order.getID(), "Failed");
                }
                break;
        }
    }

    public void tryExecuteBuyOrders(Stock stock, PortFolio portfolio) {
        List<Order> orders = buyOrders.get(stock);
        List<Order> availableSellOrder = database.retriveSellPendingOrder(portfolio.getUser()); //If no participants are selling a particular stock, the system will automatically allocate shares from the 500-lot pool for each stock.
        orderHistory = database.retriveOrderHistory(portfolio.getUser());
        double price = stock.getPrice();
        for(int i=0;i< orders.size();i++) {
                Order order = orders.get(i);
            for (int j = 0; j < availableSellOrder.size(); j++) {
                Order availablesellorder = availableSellOrder.get(j);
                if (order.equals(availablesellorder)) {  // searching whether participants are selling the particular stock
                    double totalPrice = order.getPrice() * order.getShares();
                    if (portfolio.getAccountBalance() >= totalPrice) {
                        portfolio.addStock(stock, order.getShares(), order.getPrice());
                        orders.remove(i);
                        this.buyOrders.get(order.getStock()).remove(order);
                        i--;
                        System.out.println("Buy Order completed");
                        database.updateOrderHistory(order.getID(), "Completed");
                        System.out.println("Current Holdings : " + portfolio.getHoldings() + " Acoount Balance: " + portfolio.getAccountBalance());
                        break;
                    } else {
                        System.out.println("Current Account Balance not enough.Order Failed.");
                        orders.remove(i);
                        this.buyOrders.get(order.getStock()).remove(order);
                        database.updateOrderHistory(order.getID(), "Failed");
                        i--;
                        break;
                    }
                }
            }
            //no matching, allocate from lot pool
            if (order.getPrice() >= price) {
                double totalPrice = order.getPrice() * order.getShares();
                if (portfolio.getAccountBalance() >= totalPrice) {
                    portfolio.addStock(stock, order.getShares(), order.getPrice());
                    orders.remove(i);
                    this.buyOrders.get(order.getStock()).remove(order);
                    i--;
                    System.out.println("Buy Order completed");
                    database.updateOrderHistory(order.getID(), "completed");
                    System.out.println("Current Holdings : " + portfolio.getHoldings() + " Acoount Balance: " + portfolio.getAccountBalance());
                } else {
                    System.out.println("Current Account Balance not enough.Order Failed.");
                    orders.remove(i);
                    this.buyOrders.get(order.getStock()).remove(order);
                    database.updateOrderHistory(order.getID(), "Failed");
                    i--;
                }
            } else {
                System.out.println("Buy Order price must be more than or equal to the current stock price.Order Failed");
                orders.remove(i);
                this.buyOrders.get(order.getStock()).remove(order);
                database.updateOrderHistory(order.getID(), "failed");
                i--;
            }
        }
    }

    public void tryExecuteSellOrders(Stock stock, PortFolio portfolio) {//update order book
        List<Order> orders = sellOrders.get(stock);
        orderHistory = database.retriveOrderHistory(portfolio.getUser());
        List<Order> availableBuyOrder = database.retriveBuyPendingOrder(portfolio.getUser());
        double price = stock.getPrice();
        for (int i = 0; i < orders.size(); i++) {
            Order order = orders.get(i);
            for (int j = 0; j < availableBuyOrder.size(); j++) {
                Order availablebuyorder = availableBuyOrder.get(j);
                if (order.equals(availablebuyorder)) {  // searching whether participants are buying the particular stock
                    int currentShares = portfolio.getHoldings().getOrDefault(stock, 0);
                    System.out.println(currentShares);
                    if (currentShares >= order.getShares()) {
                        portfolio.removeStock(stock, order.getShares(), order.getPrice());
                        orders.remove(i);
                        this.sellOrders.get(order.getStock()).remove(order);
                        i--;
                        System.out.println("Sell Order Completed.");
                        System.out.println("Current Holdings : " + portfolio.getHoldings() + " Acoount Balance: " + portfolio.getAccountBalance());
                        database.updateOrderHistory(order.getID(), "Completed");
                        break;
                    } else {
                        System.out.println("Not enough share to sell.Order failed");
                        orders.remove(i);
                        this.sellOrders.get(order.getStock()).remove(order);
                        database.updateOrderHistory(order.getID(), "Failed");
                        i--;
                        break;
                    }
                }
            }
            if (order.getPrice() <= price) { // is this line needed?
                int currentShares = portfolio.getHoldings().getOrDefault(stock, 0);
                System.out.println(currentShares);
                System.out.println(order.getShares());
                if (currentShares >= order.getShares()) {
                    portfolio.removeStock(stock, order.getShares(), order.getPrice());
                    orders.remove(i);
                    this.sellOrders.get(order.getStock()).remove(order);
                    i--;
                    System.out.println("Sell Order Completed.");
                    System.out.println("Current Holdings : " + portfolio.getHoldings() + " Acoount Balance: " + portfolio.getAccountBalance());
                    database.updateOrderHistory(order.getID(), "Completed");
                } else {
                    System.out.println("Not enough share to sell.Order failed");
                    orders.remove(i);
                    this.sellOrders.get(order.getStock()).remove(order);
                    database.updateOrderHistory(order.getID(), "Failed");
                    i--;
                }
            } else {
                System.out.println("Sell Order price must be equal or less than the current stock price.Stock.Order failed.");
                orders.remove(i);
                this.sellOrders.get(order.getStock()).remove(order);
                database.updateOrderHistory(order.getID(), "Failed");
                i--;
            }
        }
    }

    public void CheckPendingOrder(PortFolio portfolio) {  //execute if meet requirement, else store in list
        pendingOrders = database.retrivePendingOrder(portfolio.getUser());
        for (int i = 0; i < pendingOrders.size(); i++) {
            Order pendingorder = pendingOrders.get(i);
            if (pendingorder.getStock().getPrice() == pendingorder.getPrice()) {
                if (pendingorder.getType() == Order.Type.BUY) {
                    buyOrders.get(pendingorder.getStock()).add(pendingorder); //find order whether its available or not , if available, add order
                    tryExecuteBuyOrders(pendingorder.getStock(), portfolio);
                    database.updatePendingOrder(pendingorder.getID(),"Completed");

                } else {
                    sellOrders.get(pendingorder.getStock()).add(pendingorder);
                    //if() if the sell order being bought by other user, baru execute
                    tryExecuteSellOrders(pendingorder.getStock(), portfolio);
                    database.updatePendingOrder(pendingorder.getID(),"Completed");
                }
            }
        }
    }


    public void cancelPendingOrder(Criteria criteria, PortFolio portfolio) {
        Criteria criterias = criteria;
        pendingOrders = database.retrivePendingOrder(portfolio.getUser());
        if (!pendingOrders.isEmpty()) {
            switch (criterias) {
                case CRITERIA_LONGEST_TIME_LENGTH:
                    // 0 is the first order whhich is the longest
                    Order canceledOrder = pendingOrders.remove(0);
                    database.updatePendingOrder(canceledOrder.getID(),"Canceled");
                    System.out.println("Canceled order: " + canceledOrder.getStock().getSymbol() + " - " + canceledOrder.getShares() + " shares at " + canceledOrder.getPrice());
                    database.updateOrderHistory(canceledOrder.getID(), "Canceled");
                    break;
                case CRITERIA_HIGHEST_AMOUNT_OF_MONEY:
                    pendingOrders.sort(Comparator.comparing(Order::getValue).reversed());
                    canceledOrder = pendingOrders.remove(0);
                    database.updatePendingOrder(canceledOrder.getID(),"Canceled");
                    System.out.println("Canceled order: " + canceledOrder.getStock().getSymbol() + " - " + canceledOrder.getShares() + " shares at " + canceledOrder.getPrice());
                    database.updateOrderHistory(canceledOrder.getID(), "Canceled");
                    break;
            }

        } else {
            System.out.println("No pending order available.");
        }
    }

    public boolean isTradingHours() {
        // Get the current time
        LocalTime currentTime = LocalTime.now();
        LocalDate currentDate = LocalDate.now();

        // Get the day of the week
        DayOfWeek dayOfWeek = currentDate.getDayOfWeek();

        // Check if the day falls within the trading week (Monday to Friday)
        boolean isTradingDay = (dayOfWeek != DayOfWeek.SATURDAY && dayOfWeek != DayOfWeek.SUNDAY);

        LocalTime startMorning = LocalTime.of(0, 0);
        LocalTime endMorning = LocalTime.of(12, 30);
        LocalTime startAfternoon = LocalTime.of(14, 00);
        LocalTime endAfternoon = LocalTime.of(23, 59);

        // Check if the current time is within the trading hours
        boolean isMorningSession = currentTime.isAfter(startMorning) && currentTime.isBefore(endMorning);
        boolean isAfternoonSession = currentTime.isAfter(startAfternoon) && currentTime.isBefore(endAfternoon);

        return (isMorningSession || isAfternoonSession);//&& isTradingDay);
    }

    public boolean isInitialTradingPeriod() {
        LocalDateTime sessionStart = LocalDateTime.of(2023, 5, 22, 9, 00);
        LocalDateTime now = LocalDateTime.now();
        long noOfDays = Duration.between(sessionStart, now).toDays();
        if (noOfDays > 3) {
            return true;
        } else
            return false;
    }

    public boolean isClosingTime() {
        LocalTime now = LocalTime.now();
        LocalTime closingTime = LocalTime.of(5, 0);
        boolean isClosingTime = now.equals(closingTime);

        return isClosingTime;
    }

    public void displaySuggestedPrice(Stock stock) {
        double stockPrice = stock.getPrice(); //get current market stock price
        double acceptableRange = stockPrice * 0.01; // Calculate 1% of the current price
        double lowerBound = stockPrice - acceptableRange;
        double upperBound = stockPrice + acceptableRange;
        System.out.println("Suggested price range for " + stock.getName() + ": " + lowerBound + " - " + upperBound);
    }

    public void replenishLotPool() { //this is just the basic method, havent implemented a timer since idk how its gonna be used :p
        for (Stock stock : stocks) {
            lotPool.put(stock, 500); // Replenish the lot pool for each stock with 500 shares
        }
    }

    public int GenerateId() {
        Random rd = new Random();
        int id;
        List<Integer> orderID = database.retriveOrderID();
        HashSet<Integer> nonduplicateID = new HashSet<>();
        nonduplicateID.addAll(orderID);
        do {
            id = rd.nextInt(10000);
        } while (nonduplicateID.contains(id));
        nonduplicateID.add(id);
        return id;
    }


    //    public void updatePrices() {
//        for (Stock stock : stocks) {
//            // Update the stock price based on some market data source
//            stock.getPrice();
//            tryExecuteBuyOrders(stock, new PortFolio()); // clear the previous user
//            tryExecuteSellOrders(stock, new PortFolio());
//        }
//    }
    public List<Order> getPendingOrders(User user) {
        return database.retrivePendingOrder(user);
    }

    public void getStocklist() {
        System.out.println(stocks);
    }

    //public void replemnishLot() {

    //}

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        Stocklist2 stocklist = new Stocklist2();
        Price2 price2 = new Price2();
        PriorityQueue<Stock> retrievedStockList = stocklist.fetchStockList();
        TradingEngine tradingEngine = new TradingEngine(new ArrayList<>(retrievedStockList));
        //tradingEngine.getStocklist();
        User user = new User("Chai", "lichee03@gmail.com", "B123456!");
        PortFolio portfolio = new PortFolio(user);
//        Database database = new Database();
        TradingApp ta = new TradingApp(tradingEngine);
        Order.Type buy = Order.Type.BUY;
        Order.Type sell = Order.Type.SELL;
//        Criteria time = Criteria.CRITERIA_LONGEST_TIME_LENGTH;
//        Criteria money = Criteria.CRITERIA_HIGHEST_AMOUNT_OF_MONEY;
////
        Order.Position market = Order.Position.MARKET;
        Order.Position limit = Order.Position.LIMIT;
//        Stock stock = new Stock("4715.KL");
//        Stock stock2 = new Stock("5302.KL");
//        Order order1 = new Order(1011,stock2, buy, market, 100);
//        Order order2 = new Order(1022,stock, buy, limit, 500, 2.5);
//        Order order3 = new Order(1023,stock2, buy, limit, 100, 2.18);
        // System.out.println(order.getID());
//        System.out.println(order);
//        ta.placeOrder(user, order);
//        System.out.println("Current Holdings : " + portfolio.getHoldings() + "  Account Balance: " + portfolio.getAccountBalance());
//        System.out.println(order1);
//        ta.placeOrder(user, order1);
//        System.out.println("Current Holdings : " + portfolio.getHoldings() + "  Acoount Balance: " + portfolio.getAccountBalance());
//        System.out.println(order2);
//        ta.placeOrder(user, order2);
//        System.out.println("Current Holdings : " + portfolio.getHoldings() + " Acoount Balance: " + portfolio.getAccountBalance());
//        System.out.println(order3);
//        ta.placeOrder(user, order3);
//        System.out.println("Current Holdings : " + portfolio.getHoldings() + " Acoount Balance: " + portfolio.getAccountBalance());
//        System.out.println("Current Pending Order: ");
//        ta.updatePendingOrder(user);
        ta.setOrder(user);
//        tradingEngine.CheckPendingOrder(portfolio);
//        database.delete();
////        tradingEngine.cancelPendingOrder(money,portfolio);
//            System.out.println("--------------------------------------");
//            System.out.printf("%-20s %-20s\n", " Stock", "Shares");
//            System.out.println("--------------------------------------");
//        for (Map.Entry<Stock, Integer> entry : database.retriveHoldings().entrySet()) {
//            Stock stock = entry.getKey();
//            int shares = entry.getValue();
//            System.out.printf("%-20s %-20s", stock.getSymbol(), shares);
//            System.out.println();
//        Stock stock = new Stock("4714.kl");
//        System.out.println(portfolio.getHoldings());
//        int currentShares = portfolio.getHoldings().getOrDefault(stock, 0);
//        System.out.println(currentShares);
//        Order order = new Order(1010,stock, sell, market, 500);
//        tradingEngine.executeOrder(order,portfolio);
//        }
//    }
    }
}
