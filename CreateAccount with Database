import java.util.ArrayList;
import java.util.PriorityQueue;
import java.util.Scanner;
import java.io.*;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;

public class CreateAccount {
    private static TradingApp tradingApp;
    private static TradingEngine tradingEngine;
    private static User user;
    private static PortFolio portfolio;
    private static Database database;


    public static void main(String[] args) {
        database = new Database();
        Scanner scanner = new Scanner(System.in);
        System.out.println("Welcome to the trading competition!");
        System.out.println("Press 1 to create account, 2 to login");
        int num = scanner.nextInt();
        switch (num) {
            case 1:
                Register();
                Login();
                break;
            case 2:
                Login();
                break;

        }
    }

    public static void Register() {
        Scanner scanner = new Scanner(System.in);
        // 1. Create a trading account
        System.out.println("Welcome to the trading competition!");
        System.out.println("Please enter your details to create a trading account.");

        System.out.print("Enter your full name: ");
        String name = scanner.nextLine();

        System.out.print("Enter your email address: ");
        String email = scanner.nextLine();

        System.out.print("Enter a password(Must be 8 characters including alphabets, numbers and special characters: ");
        String password = scanner.nextLine();

        // Validate the password
        while (!isValidPassword(password)) {
            System.out.println("Password is invalid!");
            System.out.print("Enter a password: ");
            password = scanner.nextLine();
        }
        System.out.println("Password is valid!");
        System.out.println("Congratulations! Your trading account has been created successfully.");
        database.insertUser(name, email, password);
    }

    public static void Login() {
        Scanner scanner = new Scanner(System.in);
        Stocklist2 stocklist = new Stocklist2();
        Price2 price2 = new Price2();
        PriorityQueue<Stock> retrievedStockList = stocklist.fetchStockList();
        TradingEngine tradingEngine = new TradingEngine(new ArrayList<>(retrievedStockList));
        TradingApp tradingapp = new TradingApp(tradingEngine);
        PortFolio portfolio = new PortFolio(user);
        Database database = new Database();
        // 2. Log in to the app
        System.out.println("Please enter your account credentials to log in to the trading competition app.");
//
        System.out.print("Enter your email address: ");
        String loginEmail = scanner.nextLine();

        System.out.print("Enter your password: ");
        String loginPassword = scanner.nextLine();

        String filePath = "/Users/lichee/IdeaProjects/WallStreetWarriors/list of accounts.txt";
        boolean isMatchFound = database.readUser(loginEmail,loginPassword);


        if (isMatchFound) {
            System.out.println("Logged in successfully!");
            user=database.retriveUser(loginEmail);
            portfolio= new PortFolio(user);
            System.out.println("1: place order \n2: pending order \n3: cancel order \n4. Check holdings \n5. Ranking \n6. Stock search \n7. Trading Dashboard \n8. OrderHistory \n9. Exit");
            int num = scanner.nextInt();

            while (true) {
                switch (num) {
                    case 1:
                        tradingEngine.CheckPendingOrder(portfolio);//keep checking
                        tradingapp.setOrder(portfolio.getUser());
                        break;
                    case 2:
                        tradingEngine.CheckPendingOrder(portfolio);
                        tradingapp.updatePendingOrder(portfolio.getUser());
                        break;
                    case 3:
                        System.out.println("1. Cancel order base on longest time \n 2. Cancel order base on highest amount of money");
                        int criteria = scanner.nextInt();
                        TradingEngine.Criteria criterias = null;
                        switch (criteria) {
                            case 1:
                                criterias = TradingEngine.Criteria.CRITERIA_LONGEST_TIME_LENGTH;
                                break;
                            case 2:
                                criterias = TradingEngine.Criteria.CRITERIA_HIGHEST_AMOUNT_OF_MONEY;
                                break;
                        }
                        tradingEngine.cancelPendingOrder(criterias,portfolio);
                        tradingEngine.CheckPendingOrder(portfolio); //keep checking the condition
                        break;
                    case 4:
                        System.out.println("Current Holdings : " + portfolio.getHoldings() + " Acoount Balance: " + portfolio.getAccountBalance());
                        break;
                    case 8:
                        System.out.println("Order History: ");
                        System.out.println(database.retriveOrderHistory(user));
                        break;
                    case 9:
                        return;
                }
                System.out.println("1: place order \n2: pending order \n3: cancel order \n4. Check holdings \n5. Ranking \n6. Stock search \n7. Trading Dashboard \n8. OrderHistory \n9. Exit");
                num = scanner.nextInt();
            }
        } else {
            System.out.println("Incorrect email address or password. Please try again.");
            Login();
        }
    }


    public static boolean isValidPassword(String password) {
        // Check if the password is exactly 8 characters long
        if (password.length() != 8) {
            return false;
        }

        // Check if the password contains at least one alphabet, one number, and one special character
        boolean hasAlphabet = false;
        boolean hasNumber = false;
        boolean hasSpecialChar = false;

        for (char c : password.toCharArray()) {
            if (Character.isLetter(c)) {
                hasAlphabet = true;
            } else if (Character.isDigit(c)) {
                hasNumber = true;
            } else {
                hasSpecialChar = true;
            }
        }


        if (!hasAlphabet || !hasNumber || !hasSpecialChar) {
            return false;
        }

        return true;
    }
}






